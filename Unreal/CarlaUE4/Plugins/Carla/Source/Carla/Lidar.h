// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "LidarLaser.h"
#include "Settings/LidarDescription.h"
#include "Game/CapturedLidarSegment.h"
#include "Lidar.generated.h"

UCLASS()
class CARLA_API ALidar : public AActor
{
  GENERATED_BODY()

public:
  // Sets default values for this actor's properties
  ALidar();

  void Set(const FLidarDescription &LidarDescription);

protected:
  // Called when the game starts or when spawned
  virtual void BeginPlay() override;

  TArray<LidarLaser> Lasers;
  float CurrentHorizontalAngle = 0;

  void CreateLasers();

public:

  /** Capture lidar segment points produced by DeltaTime */
  void ReadPoints(float DeltaTime, FCapturedLidarSegment& LidarSegmentData);

  /** Number of lasers */
  UPROPERTY(EditDefaultsOnly, Category = "Lidar Description")
  int Channels = 32;

  /** Measure distance */
  UPROPERTY(EditDefaultsOnly, Category = "Lidar Description")
  float Range = 5000;

  /** Points generated by all lasers per second */
  UPROPERTY(EditDefaultsOnly, Category = "Lidar Description")
  float PointsPerSecond = 56000;

  /** Lidar rotation frequency */
  UPROPERTY(EditDefaultsOnly, Category = "Lidar Description")
  float RotationFrequency = 10;

  /**
    Upper laser angle, counts from horizontal,
    positive values means above horizontal line
  */
  UPROPERTY(EditDefaultsOnly, Category = "Lidar Description")
  float UpperFovLimit = 10;

  /**
    Lower laser angle, counts from horizontal,
    negative values means under horizontal line
  */
  UPROPERTY(EditDefaultsOnly, Category = "Lidar Description")
  float LowerFovLimit = -30;

  /** wether to show debug points of laser hits in simulator */
  UPROPERTY(EditDefaultsOnly, Category = "Lidar Description")
  bool ShowDebugPoints = false;

};
